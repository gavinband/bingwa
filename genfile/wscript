import os.path
import glob
#import UnitTest

def configure( conf ):
	pass

def create_test( bld, name ):
	bld.new_task_gen(
		features = 'cxx cprogram',
		target = name,
		source = [  'test/' + name + '.cpp' ],
		uselib_local = 'genfile',
		includes='./include',
		unit_test=1,
		install_path=None
	)

def create_benchmark( bld, name ):
	bld.new_task_gen(
		features = 'cxx cprogram',
		target = name,
		source = [  'benchmark/' + name + '.cpp' ],
		uselib_local = 'genfile',
		includes = './include',\
		export_incdirs = './include',
		install_path = None
	)


def build( bld ):
	import Options
	
	#---------------------
	# libs
	#---------------------
	bld.new_task_gen(
		features = 'cxx cstaticlib',
		target = 'genfile',
		source = bld.glob( 'src/*.cpp' ),
		includes='./include',
		uselib = 'ZLIB BOOST BOOST_IOSTREAMS BOOST_SYSTEM BOOST_FILESYSTEM',
		export_incdirs = './include'
	)
	
	create_test( bld, 'test_cohort_individual_source' )
	create_test( bld, 'test_sample_filtering_cohort_individual_source' )
	create_test( bld, 'test_cross_cohort_covariate_value_mapping' )

	create_test( bld, 'test_bgen_header_format' )
	create_test( bld, 'test_bgen_snp_format' )
	create_test( bld, 'test_genfile_io' )
	create_test( bld, 'test_snp_data_source_chain' )
	create_test( bld, 'test_snp_data_source_rack' )
	create_test( bld, 'test_sample_filtering_snp_data_source' )
	create_test( bld, 'test_allele_flipping_snp_data_source' )
	create_test( bld, 'test_strand_aligning_snp_data_source' )
	create_test( bld, 'test_vcf_metadata' )

	create_benchmark( bld, 'benchmark-io' )
