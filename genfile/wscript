import os.path
import glob
import UnitTest

def configure( conf ):
	pass

def create_test( bld, name ):
	bld.new_task_gen(
		features = 'cxx cprogram',
		target = name,
		source = [  'test/' + name + '.cpp' ],
		uselib_local = 'genfile',
		includes='./include',
		unit_test=1,
		install_path=None
	)

def create_benchmark( bld, name ):
	bld.new_task_gen(
		features = 'cxx cprogram',
		target = name,
		source = [  'benchmarks/' + name + '.cpp' ],
		uselib_local = 'genfile',
		includes='./include',
		install_path=None
	)


def build( bld ):
	import Options
	
	#---------------------
	# libs
	#---------------------
	bld.new_task_gen(
		features = 'cxx cstaticlib',
		target = 'genfile',
		source = [
			'src/snp_data_utils.cpp',
			'src/SNPDataSource.cpp',
			'src/SNPDataSink.cpp',
			'src/SNPDataSourceChain.cpp',
			'src/SNPDataSourceRack.cpp',
			'src/bgen.cpp',
			'src/gen.cpp',
			'src/wildcard.cpp',
			'src/Chromosome.cpp',
			'src/GenFileSNPDataSource.cpp',
			'src/BGenFileSNPDataSource.cpp',
			'src/GenomePosition.cpp',
			'src/SampleFilteringSNPDataSource.cpp',
			'src/SNPIdentifyingDataTest.cpp',
			'src/SNPFilteringSNPDataSource.cpp',
			'src/SNPIDFieldsInListTest.cpp'
		],
		includes='./include',
		uselib = 'BOOST ZLIB BOOST_IOSTREAMS BOOST_FILESYSTEM BOOST_SYSTEM',
		export_incdirs = './include'
	)
	
	create_benchmark( bld, 'benchmark-io' )
	
	create_test( bld, 'test_bgen_header_format' )
	create_test( bld, 'test_bgen_snp_format' )
	create_test( bld, 'test_genfile_io' )
	create_test( bld, 'test_snp_data_source_chain' )
	create_test( bld, 'test_snp_data_source_rack' )
	create_test( bld, 'test_sample_filtering_snp_data_source' )
