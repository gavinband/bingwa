
//          Copyright Gavin Band 2008 - 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <vector>
#include <boost/foreach.hpp>
#define foreach BOOST_FOREACH
#include <boost/function.hpp>
#include <boost/tuple/tuple.hpp>
#include <boost/thread.hpp>
#include "genfile/SNPIdentifyingData.hpp"
#include "genfile/VariantEntry.hpp"
#include "genfile/vcf/get_set_eigen.hpp"
#include "genfile/SNPDataSourceProcessor.hpp"
#include "genfile/Error.hpp"
#include "components/SNPSummaryComponent/SNPSummaryComponent.hpp"
#include "../../qctool_version_autogenerated.hpp"
#include "components/SNPSummaryComponent/DBOutputter.hpp"
#include "components/SNPSummaryComponent/FileOutputter.hpp"
#include "components/SNPSummaryComponent/AssociationTest.hpp"
#include "components/SNPSummaryComponent/AncestralAlleleAnnotation.hpp"

SNPSummaryComputationManager::SNPSummaryComputationManager( genfile::CohortIndividualSource const& samples ):
	m_samples( samples ),
	m_sexes( get_sexes( samples )),
	m_samples_by_sex( get_samples_by_sex( m_sexes ) )
{}

std::vector< char > SNPSummaryComputationManager::get_sexes( genfile::CohortIndividualSource const& samples ) const {
	std::vector< char > result( samples.get_number_of_individuals(), '.' ) ;
	genfile::CohortIndividualSource::ColumnSpec column_spec = samples.get_column_spec() ;
	if( column_spec.check_for_column( "sex" ) ) {
		if( column_spec[ "sex" ].is_discrete() ) {
			for( std::size_t i = 0; i < samples.get_number_of_individuals(); ++i ) {
				genfile::CohortIndividualSource::Entry const entry = samples.get_entry( i, "sex" ) ;
				if( !entry.is_missing() ) {
					std::string const sex = genfile::string_utils::to_lower( entry.as< std::string >() ) ;
					if( sex == "m" || sex == "male" ) {
						result[i] = 'm' ;
					} else if( sex == "f" || sex == "female" ) {
						result[i] = 'f' ;
					}
					else {
						throw genfile::MalformedInputError( samples.get_source_spec(), i+2, column_spec.find_column( "sex" )) ;
					}
				}
			}
		}
		else {
			std::cerr << "!! (SNPSummaryComputationManager::get_sexes): sex column found but it has the wrong type!\n" ;
			throw genfile::MalformedInputError( samples.get_source_spec(), 1, column_spec.find_column( "sex" )) ;
		}
	}
	return result ;
}

std::map< char, std::vector< int > > SNPSummaryComputationManager::get_samples_by_sex( std::vector< char > const& sexes ) const {
	std::map< char, std::vector< int > > result ;
	result[ 'm' ] ;
	result[ 'f' ] ;
	result[ '.' ] ;

	for( std::size_t i = 0; i < sexes.size(); ++i ) {
		result[ sexes[i] ].push_back( i ) ;
	}

	return result ;
}

void SNPSummaryComputationManager::add_computation( std::string const& name, SNPSummaryComputation::UniquePtr computation ) {
	m_computations.insert( name, computation ) ;
}

void SNPSummaryComputationManager::add_result_callback( ResultCallback callback ) {
	m_result_signal.connect( callback ) ;
}

void SNPSummaryComputationManager::begin_processing_snps( std::size_t number_of_samples ) {
	m_snp_index = 0 ;
	m_genotypes.resize( number_of_samples, 3 ) ;
}

void SNPSummaryComputationManager::processed_snp( genfile::SNPIdentifyingData const& snp, genfile::VariantDataReader& data_reader ) {
	{
		genfile::vcf::GenotypeSetter< Eigen::MatrixBase< SNPSummaryComputation::Genotypes > > setter( m_genotypes ) ;
		data_reader.get( "genotypes", setter ) ;
	}

	if( !snp.get_position().chromosome().is_missing() && snp.get_position().chromosome().is_sex_determining() ) {
		fix_sex_chromosome_genotypes( snp, m_genotypes ) ;
	}

	Computations::iterator i = m_computations.begin(), end_i = m_computations.end() ;
	for( ; i != end_i; ++i ) {
		i->second->operator()(
			snp,
			m_genotypes,
			m_sexes,
			data_reader,
			boost::bind(
				boost::ref( m_result_signal ),
				m_snp_index,
				snp,
				i->first,
				_1,
				_2
			)
		) ;
	}
	++m_snp_index ;
}

// On X and Y chromosome, recode males if necessary so the genotypes are 0/1.
// On Y chromosome check all female calls are 0.
void SNPSummaryComputationManager::fix_sex_chromosome_genotypes( genfile::SNPIdentifyingData const& snp, SNPSummaryComputation::Genotypes& genotypes ) const {
	genfile::Chromosome const& chromosome = snp.get_position().chromosome() ;
	if( chromosome != genfile::Chromosome( "0X" ) && chromosome != genfile::Chromosome( "0Y" ) ) {
		throw genfile::BadArgumentError( "SNPSummaryComputationManager::fix_sex_chromosome_genotypes()", "snp=\"" + genfile::string_utils::to_string( snp ) = "\"" ) ;
	}

	{
		std::vector< int > const& males = m_samples_by_sex.find( 'm' )->second ;
		if( males.size() > 0 ) {
			if( determine_male_coding_column( snp, genotypes, males ) == 2 ) {
				for( std::size_t i = 0; i < males.size(); ++i ) {
					genotypes( males[i], 1 ) = genotypes( males[i], 2 ) ;
					genotypes( males[i], 2 ) = 0 ;
				}
			}
		}
	}
	
	if( chromosome == genfile::Chromosome( "0Y" )) {
		std::vector< int > const& females = m_samples_by_sex.find( 'f' )->second ;
		for( std::size_t i = 0; i < females.size(); ++i ) {
			if( genotypes.row( females[i] ).array().abs().maxCoeff() != 0 ) {
				std::cerr << "!! (SNPSummaryComputationManager::fix_sex_chromosome_genotypes()): at Y chromosome SNP "
					<< snp
					<< ", sample #"
					<< (females[i]+1)
					<< " (" << m_samples.get_entry( females[i], "ID_1" ) << ") "
					<< " has nonzero genotype call!\n" ;
				throw genfile::BadArgumentError( "SNPSummaryComputationManager::fix_sex_chromosome_genotypes()", "genotypes" ) ;
			}
		}
	}
}

// Figure out if males are coded like heterozygote or homozygote females.
int SNPSummaryComputationManager::determine_male_coding_column(
	genfile::SNPIdentifyingData const& snp,
	SNPSummaryComputation::Genotypes const& genotypes,
	std::vector< int > const& males
) const {
	int column = -1 ;
	std::size_t column_determining_sample ;
	for( std::size_t i = 0; i < males.size(); ++i ) {
		if( genotypes( males[i], 1 ) != 0 ) {
			if( genotypes( males[i], 2 ) != 0 ) {
				std::cerr << "!! (SNPSummaryComputationManager::determine_male_coding_column()): at X chromosome SNP "
					<< snp
					<< ", sample #"
					<< (males[i]+1)
					<< " (" << m_samples.get_entry( males[i], "ID_1" ) << ") "
					<< " has nonzero heterozygote and homozygote call probabilities!\n" ;
				throw genfile::BadArgumentError( "SNPSummaryComputationManager::determine_male_coding_column()", "genotypes" ) ;
			}
			else {
				if( column == -1 ) {
					column = 1 ;
					column_determining_sample = males[i] ;
				}
				else if( column != 1 ) {
					std::cerr << "!! (SNPSummaryComputationManager::determine_male_coding_column()): at X chromosome SNP "
						<< snp
						<< ", samples "
						<< (column_determining_sample+1)
						<< " (" << m_samples.get_entry( column_determining_sample, "ID_1" ) << ") and "
						<< (males[i]+1)
						<< " (" << m_samples.get_entry( males[i], "ID_1" ) << ") "
						<< "are coded differently (one heterozygote, one homozygote.)\n" ;
					throw genfile::BadArgumentError( "SNPSummaryComputationManager::determine_male_coding_column()", "genotypes" ) ;
				}
			}
		}
	}
	return column ;
}

void SNPSummaryComputationManager::end_processing_snps() {}

std::string SNPSummaryComputationManager::get_summary( std::string const& prefix, std::size_t column_width ) {
	std::string result ;
	Computations::const_iterator i = m_computations.begin(), end_i = m_computations.end() ;
	for( ; i != end_i; ++i ) {
		result += i->second->get_summary( prefix, column_width ) + "\n";
	}
	return result ;
}

void SNPSummaryComponent::declare_options( appcontext::OptionProcessor& options ) {
	options.declare_group( "SNP computation options" ) ;
	options[ "-snp-stats" ]
		.set_description( "Calculate and output per-SNP statistics.  This implies that no SNP filtering options are used." )
		.set_takes_single_value() ;

	options[ "-snp-stats-columns" ]
        .set_description( "Comma-seperated list of extra columns to output in the snp-wise statistics file." )
		.set_takes_single_value()
		.set_default_value( "alleles,HWE,missingness,information" ) ;

	options.declare_group( "Association test options" ) ;
	options[ "-test" ]
		.set_description( "Perform an association test on the given phenotype." )
		.set_takes_single_value() ;
	options[ "-covariates" ]
		.set_description( "Specify a comma-separated list of covariates to use in the association test." )
		.set_takes_single_value()
		.set_default_value( "" ) ;
	options[ "-no-X-inactivation" ]
		.set_description( "Specify that X chromosome inactivation in females should not be modelled in the association test. "
			"If this option is specified, females have twice the maximum exposure that males do." )
		.set_takes_single_value()
		.set_default_value( "" ) ;
	
	options[ "-annotate" ]
		.set_description( "Specify a FASTA-formatted file containing ancestral alleles to annotate variants with." )
		.set_takes_single_value() ;
	
	options.option_implies_option( "-snp-stats", "-g" ) ;
	options.option_implies_option( "-annotate", "-g" ) ;
	options.option_implies_option( "-test", "-g" ) ;
}

SNPSummaryComponent::SNPSummaryComponent(
	genfile::CohortIndividualSource const& samples,
	appcontext::OptionProcessor const& options,
	appcontext::UIContext& ui_context
):
	m_samples( samples ),
	m_options( options ),
	m_ui_context( ui_context )
{}

genfile::SNPDataSourceProcessor::Callback::UniquePtr SNPSummaryComponent::create() const {
	genfile::SNPDataSourceProcessor::Callback::UniquePtr result( create_manager().release() ) ;
	return result ;
}

SNPSummaryComputationManager::UniquePtr SNPSummaryComponent::create_manager() const {
	SNPSummaryComputationManager::UniquePtr manager( new SNPSummaryComputationManager( m_samples ) ) ;
	using genfile::string_utils::to_string ;
	
	std::string filename ;
	if( m_options.check( "-snp-stats" )) {
		filename = m_options.get_value< std::string >( "-snp-stats" ) ;
	}
	else {
		std::vector< std::string > filenames = m_options.get_values< std::string >( "-g" ) ;
		if( filenames.size() == 1 ) {
			filename = genfile::strip_gen_file_extension_if_present( filenames[0] ) + ( m_options.check( "-nodb" ) ? ".snp-stats" : ".qcdb" ) ;
		} else {
			filename = "qctool_cohort_1-" + to_string( filenames.size() ) + ( m_options.check( "-nodb" ) ? ".snp-stats" : ".qcdb" ) ;
		}
	}

	if( m_options.check( "-nodb" )) {
		manager->add_result_callback(
			boost::bind(
				&FileOutputter::operator(),
				FileOutputter::create_shared( filename ),
				_1, _2, _3, _4, _5
			)
		) ;
	}
	else {
		snp_summary_component::DBOutputter::SharedPtr outputter = snp_summary_component::DBOutputter::create_shared(
			filename,
			m_options.get< std::string >( "-analysis-name" ),
			m_options.get_values_as_map()
		) ;
	
		manager->add_result_callback(
			boost::bind(
				&snp_summary_component::DBOutputter::operator(),
				outputter,
				_1, _2, _3, _4, _5
			)
		) ;
	}
	
	add_computations( *manager ) ;
	return manager ;
}

void SNPSummaryComponent::add_computations( SNPSummaryComputationManager& manager ) const {
	using genfile::string_utils::split_and_strip_discarding_empty_entries ;
	if( m_options.check( "-snp-stats" )) {
		std::vector< std::string > elts = split_and_strip_discarding_empty_entries( m_options.get_value< std::string >( "-snp-stats-columns" ), ",", " \t" ) ;
		foreach( std::string const& elt, elts ) {
			manager.add_computation( elt, SNPSummaryComputation::create( elt )) ;
		}
	}
	if( m_options.check( "-test" )) {
		std::vector< std::string > phenotypes = split_and_strip_discarding_empty_entries( m_options.get_value< std::string >( "-test" ), ",", " \t" ) ;
		std::vector< std::string > covariates ;
		if( m_options.check( "-covariates" ))  {
			covariates = split_and_strip_discarding_empty_entries( m_options.get_value< std::string >( "-covariates" ), ",", " \t" ) ;
		}
		foreach( std::string const& phenotype, phenotypes ) {
			manager.add_computation(
				"association_test",
				AssociationTest::create(
					"autosomal",
					phenotype,
					covariates,
					m_samples,
					m_options
				)
			) ;
			manager.add_computation(
				"X_chromosome_association_test",
				AssociationTest::create(
					"X chromosome",
					phenotype,
					covariates,
					m_samples,
					m_options
				)
			) ;
		}
	}
	if( m_options.check( "-annotate" )) {
		appcontext::UIContext::ProgressContext progress = m_ui_context.get_progress_context( "Loading FASTA annotation" ) ;
		manager.add_computation(
			"ancestral_alleles",
			SNPSummaryComputation::UniquePtr(
				new AncestralAlleleAnnotation( m_options.get< std::string >( "-annotate" ), progress )
			)
		) ;
	}
	
	m_ui_context.logger() << "SNPSummaryComponent: the following components are in place:\n" << manager.get_summary( "  " ) << "\n" ;
}

SNPSummaryComputation::UniquePtr SNPSummaryComponent::create_computation( std::string const& name ) const {
	if( name != "association_test" ) {
		return SNPSummaryComputation::UniquePtr( SNPSummaryComputation::create( name )) ;
	} else {
		assert(0) ;
	}
}
