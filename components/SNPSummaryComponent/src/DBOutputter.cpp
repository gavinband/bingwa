
//          Copyright Gavin Band 2008 - 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <string>
#include <memory>
#include <boost/shared_ptr.hpp>
#include <boost/tuple/tuple.hpp>
#include <boost/thread/thread.hpp>
#include "genfile/SNPIdentifyingData.hpp"
#include "genfile/VariantEntry.hpp"
#include "genfile/Error.hpp"
#include "db/Connection.hpp"
#include "db/SQLStatement.hpp"
#include "appcontext/get_current_time_as_string.hpp"
#include "components/SNPSummaryComponent/DBOutputter.hpp"
#include "../../qctool_version_autogenerated.hpp"

namespace snp_summary_component {
	DBOutputter::UniquePtr DBOutputter::create( std::string const& filename, std::string const& cohort_name, Metadata const& metadata ) {
		return UniquePtr( new DBOutputter( filename, cohort_name, metadata ) ) ;
	}
	DBOutputter::SharedPtr DBOutputter::create_shared( std::string const& filename, std::string const& cohort_name, Metadata const& metadata ) {
		return SharedPtr( new DBOutputter( filename, cohort_name, metadata ) ) ;
	}

	DBOutputter::DBOutputter( std::string const& filename, std::string const& cohort_name, Metadata const& metadata ):
		qcdb::DBOutputter( filename, cohort_name, metadata ),
		m_max_transaction_count( 10000 ),
		m_variable_id( get_or_create_entity( "per-variant variable", "per-variant variable values" ) )
	{}

	DBOutputter::~DBOutputter() {
		write_data( m_data ) ;
	}

	void DBOutputter::operator()(
		std::size_t index,
		genfile::SNPIdentifyingData const& snp,
		std::string const& computation_name,
		std::string const& variable,
		genfile::VariantEntry const& value
	) {
		m_data.resize( m_data.size() + 1 ) ;
		m_data.back().get<0>() = snp ;
		m_data.back().get<1>() = variable ;
		m_data.back().get<2>() = value ;

		if( m_data.size() == m_max_transaction_count ) {
			write_data( m_data ) ;
			m_data.clear() ;
		}
	}

	void DBOutputter::write_data( Data const& data ) {
		db::Connection::ScopedTransactionPtr transaction = connection().open_transaction( 240 ) ; // wait 4 minutes if we have to.

		if( !transaction.get() ) {
			throw genfile::OperationFailedError( "SNPSummaryComponent::DBOutputter::write_data()", connection().get_spec(), "Opening transaction." ) ;
		}
		for( std::size_t i = 0; i < data.size(); ++i ) {
			store_data(
				data[i].get<0>(),
				data[i].get<1>(),
				data[i].get<2>()
			) ;
		}
	}

	void DBOutputter::store_data(
		genfile::SNPIdentifyingData const& snp,
		std::string const& variable,
		genfile::VariantEntry const& value
	) {
		db::Connection::RowId snp_id = get_or_create_variant( snp ) ;
		db::Connection::RowId variable_id = get_or_create_entity( variable, variable, m_variable_id ) ;
		insert_summary_data( snp_id, variable_id, value ) ;
	}
}
