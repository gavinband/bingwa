#include <string>
#include <memory>
#include <boost/shared_ptr.hpp>
#include <boost/tuple/tuple.hpp>
#include <boost/thread/thread.hpp>
#include "genfile/SNPIdentifyingData.hpp"
#include "genfile/VariantEntry.hpp"
#include "genfile/Error.hpp"
#include "db/Connection.hpp"
#include "db/SQLStatement.hpp"
#include "appcontext/get_current_time_as_string.hpp"
#include "components/SNPSummaryComponent/DBOutputter.hpp"
#include "../../qctool_version_autogenerated.hpp"

namespace impl {
	DBOutputter::UniquePtr DBOutputter::create( std::string const& filename, std::string const& cohort_name, Metadata const& metadata ) {
		return UniquePtr( new DBOutputter( filename, cohort_name, metadata ) ) ;
	}
	DBOutputter::SharedPtr DBOutputter::create_shared( std::string const& filename, std::string const& cohort_name, Metadata const& metadata ) {
		return SharedPtr( new DBOutputter( filename, cohort_name, metadata ) ) ;
	}

	DBOutputter::DBOutputter( std::string const& filename, std::string const& cohort_name, Metadata const& metadata ):
		qcdb::DBOutputter( filename, cohort_name, metadata ),
		m_max_transaction_count( 10000 )
	{
		construct_statements() ;
	}

	DBOutputter::~DBOutputter() {
		write_data( m_data ) ;
	}

	void DBOutputter::operator()(
		std::size_t index,
		genfile::SNPIdentifyingData const& snp,
		std::string const& computation_name,
		std::string const& variable,
		genfile::VariantEntry const& value
	) {
		m_data.resize( m_data.size() + 1 ) ;
		m_data.back().get<0>() = snp ;
		m_data.back().get<1>() = variable ;
		m_data.back().get<2>() = value ;

		if( m_data.size() == m_max_transaction_count ) {
			write_data( m_data ) ;
			m_data.clear() ;
		}
	}

	void DBOutputter::construct_statements() {
		m_find_variant_statement = connection().get_statement(
			"SELECT id FROM Variant WHERE chromosome == ?2 AND position == ?3 AND rsid == ?1 AND alleleA = ?4 AND alleleB = ?5"
		) ;
		m_insert_variant_statement = connection().get_statement(
			"INSERT INTO Variant ( snpid, rsid, chromosome, position, alleleA, alleleB ) "
			"VALUES( ?1, ?2, ?3, ?4, ?5, ?6 )"
		) ;
	}

	void DBOutputter::write_data( Data const& data ) {
		db::Connection::ScopedTransactionPtr transaction = connection().open_transaction( 240 ) ; // wait 4 minutes if we have to.

		if( !transaction.get() ) {
			throw genfile::OperationFailedError( "SNPSummaryComponent::DBOutputter::write_data()", connection().get_spec(), "Opening transaction." ) ;
		}
		for( std::size_t i = 0; i < data.size(); ++i ) {
			store_data(
				data[i].get<0>(),
				data[i].get<1>(),
				data[i].get<2>()
			) ;
		}
	}

	db::Connection::RowId DBOutputter::get_or_create_snp( genfile::SNPIdentifyingData const& snp ) const {
		db::Connection::RowId result ;
		m_find_variant_statement
			->bind( 1, snp.get_rsid() )
			.bind( 2, std::string( snp.get_position().chromosome() ))
			.bind( 3, snp.get_position().position() )
			.bind( 4, snp.get_first_allele() )
			.bind( 5, snp.get_second_allele() )
			.step()
		;
		if( m_find_variant_statement->empty() ) {
			m_insert_variant_statement
				->bind( 1, snp.get_SNPID() )
				.bind( 2, snp.get_rsid() )
				.bind( 3, std::string( snp.get_position().chromosome() ) )
				.bind( 4, snp.get_position().position() )
				.bind( 5, snp.get_first_allele())
				.bind( 6, snp.get_second_allele())
				.step()
			;

			result = connection().get_last_insert_row_id() ;
			m_insert_variant_statement->reset() ;
		} else {
			result = m_find_variant_statement->get< db::Connection::RowId >( 0 ) ;
		}
		m_find_variant_statement->reset() ;
		return result ;
	}

	void DBOutputter::store_data(
		genfile::SNPIdentifyingData const& snp,
		std::string const& variable,
		genfile::VariantEntry const& value
	) {
		db::Connection::RowId snp_id = get_or_create_snp( snp ) ;
		db::Connection::RowId variable_id = get_or_create_entity( variable, "per-SNP " + variable + " values" ) ;
		insert_summary_data( snp_id, variable_id, value ) ;
	}
}
